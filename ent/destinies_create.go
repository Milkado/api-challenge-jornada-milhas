// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Milkado/api-challenge-jornada-milhas/ent/destinies"
	"github.com/Milkado/api-challenge-jornada-milhas/ent/testimonies"
)

// DestiniesCreate is the builder for creating a Destinies entity.
type DestiniesCreate struct {
	config
	mutation *DestiniesMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (dc *DestiniesCreate) SetName(s string) *DestiniesCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetPrice sets the "price" field.
func (dc *DestiniesCreate) SetPrice(f float64) *DestiniesCreate {
	dc.mutation.SetPrice(f)
	return dc
}

// SetMeta sets the "meta" field.
func (dc *DestiniesCreate) SetMeta(s string) *DestiniesCreate {
	dc.mutation.SetMeta(s)
	return dc
}

// SetDescription sets the "description" field.
func (dc *DestiniesCreate) SetDescription(s string) *DestiniesCreate {
	dc.mutation.SetDescription(s)
	return dc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dc *DestiniesCreate) SetNillableDescription(s *string) *DestiniesCreate {
	if s != nil {
		dc.SetDescription(*s)
	}
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DestiniesCreate) SetCreatedAt(t time.Time) *DestiniesCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DestiniesCreate) SetNillableCreatedAt(t *time.Time) *DestiniesCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DestiniesCreate) SetUpdatedAt(t time.Time) *DestiniesCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DestiniesCreate) SetNillableUpdatedAt(t *time.Time) *DestiniesCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// AddTestimonyIDs adds the "testimonies" edge to the Testimonies entity by IDs.
func (dc *DestiniesCreate) AddTestimonyIDs(ids ...int) *DestiniesCreate {
	dc.mutation.AddTestimonyIDs(ids...)
	return dc
}

// AddTestimonies adds the "testimonies" edges to the Testimonies entity.
func (dc *DestiniesCreate) AddTestimonies(t ...*Testimonies) *DestiniesCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return dc.AddTestimonyIDs(ids...)
}

// Mutation returns the DestiniesMutation object of the builder.
func (dc *DestiniesCreate) Mutation() *DestiniesMutation {
	return dc.mutation
}

// Save creates the Destinies in the database.
func (dc *DestiniesCreate) Save(ctx context.Context) (*Destinies, error) {
	if err := dc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DestiniesCreate) SaveX(ctx context.Context) *Destinies {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DestiniesCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DestiniesCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DestiniesCreate) defaults() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		if destinies.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized destinies.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := destinies.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		if destinies.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized destinies.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := destinies.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dc *DestiniesCreate) check() error {
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Destinies.name"`)}
	}
	if _, ok := dc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Destinies.price"`)}
	}
	if _, ok := dc.mutation.Meta(); !ok {
		return &ValidationError{Name: "meta", err: errors.New(`ent: missing required field "Destinies.meta"`)}
	}
	if v, ok := dc.mutation.Meta(); ok {
		if err := destinies.MetaValidator(v); err != nil {
			return &ValidationError{Name: "meta", err: fmt.Errorf(`ent: validator failed for field "Destinies.meta": %w`, err)}
		}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Destinies.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Destinies.updated_at"`)}
	}
	return nil
}

func (dc *DestiniesCreate) sqlSave(ctx context.Context) (*Destinies, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DestiniesCreate) createSpec() (*Destinies, *sqlgraph.CreateSpec) {
	var (
		_node = &Destinies{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(destinies.Table, sqlgraph.NewFieldSpec(destinies.FieldID, field.TypeInt))
	)
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(destinies.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.Price(); ok {
		_spec.SetField(destinies.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := dc.mutation.Meta(); ok {
		_spec.SetField(destinies.FieldMeta, field.TypeString, value)
		_node.Meta = value
	}
	if value, ok := dc.mutation.Description(); ok {
		_spec.SetField(destinies.FieldDescription, field.TypeString, value)
		_node.Description = &value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(destinies.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(destinies.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := dc.mutation.TestimoniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   destinies.TestimoniesTable,
			Columns: []string{destinies.TestimoniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testimonies.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DestiniesCreateBulk is the builder for creating many Destinies entities in bulk.
type DestiniesCreateBulk struct {
	config
	err      error
	builders []*DestiniesCreate
}

// Save creates the Destinies entities in the database.
func (dcb *DestiniesCreateBulk) Save(ctx context.Context) ([]*Destinies, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Destinies, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DestiniesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DestiniesCreateBulk) SaveX(ctx context.Context) []*Destinies {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DestiniesCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DestiniesCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
