// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Milkado/api-challenge-jornada-milhas/ent/destinypictures"
	"github.com/Milkado/api-challenge-jornada-milhas/ent/predicate"
)

// DestinyPicturesDelete is the builder for deleting a DestinyPictures entity.
type DestinyPicturesDelete struct {
	config
	hooks    []Hook
	mutation *DestinyPicturesMutation
}

// Where appends a list predicates to the DestinyPicturesDelete builder.
func (dpd *DestinyPicturesDelete) Where(ps ...predicate.DestinyPictures) *DestinyPicturesDelete {
	dpd.mutation.Where(ps...)
	return dpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (dpd *DestinyPicturesDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, dpd.sqlExec, dpd.mutation, dpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (dpd *DestinyPicturesDelete) ExecX(ctx context.Context) int {
	n, err := dpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (dpd *DestinyPicturesDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(destinypictures.Table, sqlgraph.NewFieldSpec(destinypictures.FieldID, field.TypeInt))
	if ps := dpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, dpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	dpd.mutation.done = true
	return affected, err
}

// DestinyPicturesDeleteOne is the builder for deleting a single DestinyPictures entity.
type DestinyPicturesDeleteOne struct {
	dpd *DestinyPicturesDelete
}

// Where appends a list predicates to the DestinyPicturesDelete builder.
func (dpdo *DestinyPicturesDeleteOne) Where(ps ...predicate.DestinyPictures) *DestinyPicturesDeleteOne {
	dpdo.dpd.mutation.Where(ps...)
	return dpdo
}

// Exec executes the deletion query.
func (dpdo *DestinyPicturesDeleteOne) Exec(ctx context.Context) error {
	n, err := dpdo.dpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{destinypictures.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (dpdo *DestinyPicturesDeleteOne) ExecX(ctx context.Context) {
	if err := dpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
