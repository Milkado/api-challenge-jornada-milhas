// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Milkado/api-challenge-jornada-milhas/ent/destinies"
	"github.com/Milkado/api-challenge-jornada-milhas/ent/destinypictures"
)

// DestinyPicturesCreate is the builder for creating a DestinyPictures entity.
type DestinyPicturesCreate struct {
	config
	mutation *DestinyPicturesMutation
	hooks    []Hook
}

// SetPicture sets the "picture" field.
func (dpc *DestinyPicturesCreate) SetPicture(s string) *DestinyPicturesCreate {
	dpc.mutation.SetPicture(s)
	return dpc
}

// SetPath sets the "path" field.
func (dpc *DestinyPicturesCreate) SetPath(s string) *DestinyPicturesCreate {
	dpc.mutation.SetPath(s)
	return dpc
}

// SetDestinyID sets the "destiny_id" field.
func (dpc *DestinyPicturesCreate) SetDestinyID(i int) *DestinyPicturesCreate {
	dpc.mutation.SetDestinyID(i)
	return dpc
}

// SetCreatedAt sets the "created_at" field.
func (dpc *DestinyPicturesCreate) SetCreatedAt(t time.Time) *DestinyPicturesCreate {
	dpc.mutation.SetCreatedAt(t)
	return dpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dpc *DestinyPicturesCreate) SetNillableCreatedAt(t *time.Time) *DestinyPicturesCreate {
	if t != nil {
		dpc.SetCreatedAt(*t)
	}
	return dpc
}

// SetUpdatedAt sets the "updated_at" field.
func (dpc *DestinyPicturesCreate) SetUpdatedAt(t time.Time) *DestinyPicturesCreate {
	dpc.mutation.SetUpdatedAt(t)
	return dpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dpc *DestinyPicturesCreate) SetNillableUpdatedAt(t *time.Time) *DestinyPicturesCreate {
	if t != nil {
		dpc.SetUpdatedAt(*t)
	}
	return dpc
}

// SetDestiniesID sets the "destinies" edge to the Destinies entity by ID.
func (dpc *DestinyPicturesCreate) SetDestiniesID(id int) *DestinyPicturesCreate {
	dpc.mutation.SetDestiniesID(id)
	return dpc
}

// SetDestinies sets the "destinies" edge to the Destinies entity.
func (dpc *DestinyPicturesCreate) SetDestinies(d *Destinies) *DestinyPicturesCreate {
	return dpc.SetDestiniesID(d.ID)
}

// Mutation returns the DestinyPicturesMutation object of the builder.
func (dpc *DestinyPicturesCreate) Mutation() *DestinyPicturesMutation {
	return dpc.mutation
}

// Save creates the DestinyPictures in the database.
func (dpc *DestinyPicturesCreate) Save(ctx context.Context) (*DestinyPictures, error) {
	dpc.defaults()
	return withHooks(ctx, dpc.sqlSave, dpc.mutation, dpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dpc *DestinyPicturesCreate) SaveX(ctx context.Context) *DestinyPictures {
	v, err := dpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpc *DestinyPicturesCreate) Exec(ctx context.Context) error {
	_, err := dpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpc *DestinyPicturesCreate) ExecX(ctx context.Context) {
	if err := dpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dpc *DestinyPicturesCreate) defaults() {
	if _, ok := dpc.mutation.CreatedAt(); !ok {
		v := destinypictures.DefaultCreatedAt()
		dpc.mutation.SetCreatedAt(v)
	}
	if _, ok := dpc.mutation.UpdatedAt(); !ok {
		v := destinypictures.DefaultUpdatedAt()
		dpc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpc *DestinyPicturesCreate) check() error {
	if _, ok := dpc.mutation.Picture(); !ok {
		return &ValidationError{Name: "picture", err: errors.New(`ent: missing required field "DestinyPictures.picture"`)}
	}
	if _, ok := dpc.mutation.Path(); !ok {
		return &ValidationError{Name: "path", err: errors.New(`ent: missing required field "DestinyPictures.path"`)}
	}
	if _, ok := dpc.mutation.DestinyID(); !ok {
		return &ValidationError{Name: "destiny_id", err: errors.New(`ent: missing required field "DestinyPictures.destiny_id"`)}
	}
	if _, ok := dpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DestinyPictures.created_at"`)}
	}
	if _, ok := dpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DestinyPictures.updated_at"`)}
	}
	if _, ok := dpc.mutation.DestiniesID(); !ok {
		return &ValidationError{Name: "destinies", err: errors.New(`ent: missing required edge "DestinyPictures.destinies"`)}
	}
	return nil
}

func (dpc *DestinyPicturesCreate) sqlSave(ctx context.Context) (*DestinyPictures, error) {
	if err := dpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dpc.mutation.id = &_node.ID
	dpc.mutation.done = true
	return _node, nil
}

func (dpc *DestinyPicturesCreate) createSpec() (*DestinyPictures, *sqlgraph.CreateSpec) {
	var (
		_node = &DestinyPictures{config: dpc.config}
		_spec = sqlgraph.NewCreateSpec(destinypictures.Table, sqlgraph.NewFieldSpec(destinypictures.FieldID, field.TypeInt))
	)
	if value, ok := dpc.mutation.Picture(); ok {
		_spec.SetField(destinypictures.FieldPicture, field.TypeString, value)
		_node.Picture = value
	}
	if value, ok := dpc.mutation.Path(); ok {
		_spec.SetField(destinypictures.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := dpc.mutation.CreatedAt(); ok {
		_spec.SetField(destinypictures.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dpc.mutation.UpdatedAt(); ok {
		_spec.SetField(destinypictures.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := dpc.mutation.DestiniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   destinypictures.DestiniesTable,
			Columns: []string{destinypictures.DestiniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(destinies.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DestinyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DestinyPicturesCreateBulk is the builder for creating many DestinyPictures entities in bulk.
type DestinyPicturesCreateBulk struct {
	config
	err      error
	builders []*DestinyPicturesCreate
}

// Save creates the DestinyPictures entities in the database.
func (dpcb *DestinyPicturesCreateBulk) Save(ctx context.Context) ([]*DestinyPictures, error) {
	if dpcb.err != nil {
		return nil, dpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dpcb.builders))
	nodes := make([]*DestinyPictures, len(dpcb.builders))
	mutators := make([]Mutator, len(dpcb.builders))
	for i := range dpcb.builders {
		func(i int, root context.Context) {
			builder := dpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DestinyPicturesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dpcb *DestinyPicturesCreateBulk) SaveX(ctx context.Context) []*DestinyPictures {
	v, err := dpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dpcb *DestinyPicturesCreateBulk) Exec(ctx context.Context) error {
	_, err := dpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpcb *DestinyPicturesCreateBulk) ExecX(ctx context.Context) {
	if err := dpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
