// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Milkado/api-challenge-jornada-milhas/ent/destinies"
	"github.com/Milkado/api-challenge-jornada-milhas/ent/destinypictures"
	"github.com/Milkado/api-challenge-jornada-milhas/ent/predicate"
)

// DestinyPicturesUpdate is the builder for updating DestinyPictures entities.
type DestinyPicturesUpdate struct {
	config
	hooks    []Hook
	mutation *DestinyPicturesMutation
}

// Where appends a list predicates to the DestinyPicturesUpdate builder.
func (dpu *DestinyPicturesUpdate) Where(ps ...predicate.DestinyPictures) *DestinyPicturesUpdate {
	dpu.mutation.Where(ps...)
	return dpu
}

// SetPicture sets the "picture" field.
func (dpu *DestinyPicturesUpdate) SetPicture(s string) *DestinyPicturesUpdate {
	dpu.mutation.SetPicture(s)
	return dpu
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (dpu *DestinyPicturesUpdate) SetNillablePicture(s *string) *DestinyPicturesUpdate {
	if s != nil {
		dpu.SetPicture(*s)
	}
	return dpu
}

// SetPath sets the "path" field.
func (dpu *DestinyPicturesUpdate) SetPath(s string) *DestinyPicturesUpdate {
	dpu.mutation.SetPath(s)
	return dpu
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (dpu *DestinyPicturesUpdate) SetNillablePath(s *string) *DestinyPicturesUpdate {
	if s != nil {
		dpu.SetPath(*s)
	}
	return dpu
}

// SetDestinyID sets the "destiny_id" field.
func (dpu *DestinyPicturesUpdate) SetDestinyID(i int) *DestinyPicturesUpdate {
	dpu.mutation.SetDestinyID(i)
	return dpu
}

// SetNillableDestinyID sets the "destiny_id" field if the given value is not nil.
func (dpu *DestinyPicturesUpdate) SetNillableDestinyID(i *int) *DestinyPicturesUpdate {
	if i != nil {
		dpu.SetDestinyID(*i)
	}
	return dpu
}

// SetUpdatedAt sets the "updated_at" field.
func (dpu *DestinyPicturesUpdate) SetUpdatedAt(t time.Time) *DestinyPicturesUpdate {
	dpu.mutation.SetUpdatedAt(t)
	return dpu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dpu *DestinyPicturesUpdate) SetNillableUpdatedAt(t *time.Time) *DestinyPicturesUpdate {
	if t != nil {
		dpu.SetUpdatedAt(*t)
	}
	return dpu
}

// SetDestiniesID sets the "destinies" edge to the Destinies entity by ID.
func (dpu *DestinyPicturesUpdate) SetDestiniesID(id int) *DestinyPicturesUpdate {
	dpu.mutation.SetDestiniesID(id)
	return dpu
}

// SetDestinies sets the "destinies" edge to the Destinies entity.
func (dpu *DestinyPicturesUpdate) SetDestinies(d *Destinies) *DestinyPicturesUpdate {
	return dpu.SetDestiniesID(d.ID)
}

// Mutation returns the DestinyPicturesMutation object of the builder.
func (dpu *DestinyPicturesUpdate) Mutation() *DestinyPicturesMutation {
	return dpu.mutation
}

// ClearDestinies clears the "destinies" edge to the Destinies entity.
func (dpu *DestinyPicturesUpdate) ClearDestinies() *DestinyPicturesUpdate {
	dpu.mutation.ClearDestinies()
	return dpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dpu *DestinyPicturesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, dpu.sqlSave, dpu.mutation, dpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dpu *DestinyPicturesUpdate) SaveX(ctx context.Context) int {
	affected, err := dpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dpu *DestinyPicturesUpdate) Exec(ctx context.Context) error {
	_, err := dpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpu *DestinyPicturesUpdate) ExecX(ctx context.Context) {
	if err := dpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpu *DestinyPicturesUpdate) check() error {
	if _, ok := dpu.mutation.DestiniesID(); dpu.mutation.DestiniesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DestinyPictures.destinies"`)
	}
	return nil
}

func (dpu *DestinyPicturesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := dpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(destinypictures.Table, destinypictures.Columns, sqlgraph.NewFieldSpec(destinypictures.FieldID, field.TypeInt))
	if ps := dpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpu.mutation.Picture(); ok {
		_spec.SetField(destinypictures.FieldPicture, field.TypeString, value)
	}
	if value, ok := dpu.mutation.Path(); ok {
		_spec.SetField(destinypictures.FieldPath, field.TypeString, value)
	}
	if value, ok := dpu.mutation.UpdatedAt(); ok {
		_spec.SetField(destinypictures.FieldUpdatedAt, field.TypeTime, value)
	}
	if dpu.mutation.DestiniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   destinypictures.DestiniesTable,
			Columns: []string{destinypictures.DestiniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(destinies.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.DestiniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   destinypictures.DestiniesTable,
			Columns: []string{destinypictures.DestiniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(destinies.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{destinypictures.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	dpu.mutation.done = true
	return n, nil
}

// DestinyPicturesUpdateOne is the builder for updating a single DestinyPictures entity.
type DestinyPicturesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DestinyPicturesMutation
}

// SetPicture sets the "picture" field.
func (dpuo *DestinyPicturesUpdateOne) SetPicture(s string) *DestinyPicturesUpdateOne {
	dpuo.mutation.SetPicture(s)
	return dpuo
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (dpuo *DestinyPicturesUpdateOne) SetNillablePicture(s *string) *DestinyPicturesUpdateOne {
	if s != nil {
		dpuo.SetPicture(*s)
	}
	return dpuo
}

// SetPath sets the "path" field.
func (dpuo *DestinyPicturesUpdateOne) SetPath(s string) *DestinyPicturesUpdateOne {
	dpuo.mutation.SetPath(s)
	return dpuo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (dpuo *DestinyPicturesUpdateOne) SetNillablePath(s *string) *DestinyPicturesUpdateOne {
	if s != nil {
		dpuo.SetPath(*s)
	}
	return dpuo
}

// SetDestinyID sets the "destiny_id" field.
func (dpuo *DestinyPicturesUpdateOne) SetDestinyID(i int) *DestinyPicturesUpdateOne {
	dpuo.mutation.SetDestinyID(i)
	return dpuo
}

// SetNillableDestinyID sets the "destiny_id" field if the given value is not nil.
func (dpuo *DestinyPicturesUpdateOne) SetNillableDestinyID(i *int) *DestinyPicturesUpdateOne {
	if i != nil {
		dpuo.SetDestinyID(*i)
	}
	return dpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (dpuo *DestinyPicturesUpdateOne) SetUpdatedAt(t time.Time) *DestinyPicturesUpdateOne {
	dpuo.mutation.SetUpdatedAt(t)
	return dpuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dpuo *DestinyPicturesUpdateOne) SetNillableUpdatedAt(t *time.Time) *DestinyPicturesUpdateOne {
	if t != nil {
		dpuo.SetUpdatedAt(*t)
	}
	return dpuo
}

// SetDestiniesID sets the "destinies" edge to the Destinies entity by ID.
func (dpuo *DestinyPicturesUpdateOne) SetDestiniesID(id int) *DestinyPicturesUpdateOne {
	dpuo.mutation.SetDestiniesID(id)
	return dpuo
}

// SetDestinies sets the "destinies" edge to the Destinies entity.
func (dpuo *DestinyPicturesUpdateOne) SetDestinies(d *Destinies) *DestinyPicturesUpdateOne {
	return dpuo.SetDestiniesID(d.ID)
}

// Mutation returns the DestinyPicturesMutation object of the builder.
func (dpuo *DestinyPicturesUpdateOne) Mutation() *DestinyPicturesMutation {
	return dpuo.mutation
}

// ClearDestinies clears the "destinies" edge to the Destinies entity.
func (dpuo *DestinyPicturesUpdateOne) ClearDestinies() *DestinyPicturesUpdateOne {
	dpuo.mutation.ClearDestinies()
	return dpuo
}

// Where appends a list predicates to the DestinyPicturesUpdate builder.
func (dpuo *DestinyPicturesUpdateOne) Where(ps ...predicate.DestinyPictures) *DestinyPicturesUpdateOne {
	dpuo.mutation.Where(ps...)
	return dpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dpuo *DestinyPicturesUpdateOne) Select(field string, fields ...string) *DestinyPicturesUpdateOne {
	dpuo.fields = append([]string{field}, fields...)
	return dpuo
}

// Save executes the query and returns the updated DestinyPictures entity.
func (dpuo *DestinyPicturesUpdateOne) Save(ctx context.Context) (*DestinyPictures, error) {
	return withHooks(ctx, dpuo.sqlSave, dpuo.mutation, dpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (dpuo *DestinyPicturesUpdateOne) SaveX(ctx context.Context) *DestinyPictures {
	node, err := dpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dpuo *DestinyPicturesUpdateOne) Exec(ctx context.Context) error {
	_, err := dpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpuo *DestinyPicturesUpdateOne) ExecX(ctx context.Context) {
	if err := dpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpuo *DestinyPicturesUpdateOne) check() error {
	if _, ok := dpuo.mutation.DestiniesID(); dpuo.mutation.DestiniesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DestinyPictures.destinies"`)
	}
	return nil
}

func (dpuo *DestinyPicturesUpdateOne) sqlSave(ctx context.Context) (_node *DestinyPictures, err error) {
	if err := dpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(destinypictures.Table, destinypictures.Columns, sqlgraph.NewFieldSpec(destinypictures.FieldID, field.TypeInt))
	id, ok := dpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DestinyPictures.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, destinypictures.FieldID)
		for _, f := range fields {
			if !destinypictures.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != destinypictures.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpuo.mutation.Picture(); ok {
		_spec.SetField(destinypictures.FieldPicture, field.TypeString, value)
	}
	if value, ok := dpuo.mutation.Path(); ok {
		_spec.SetField(destinypictures.FieldPath, field.TypeString, value)
	}
	if value, ok := dpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(destinypictures.FieldUpdatedAt, field.TypeTime, value)
	}
	if dpuo.mutation.DestiniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   destinypictures.DestiniesTable,
			Columns: []string{destinypictures.DestiniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(destinies.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.DestiniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   destinypictures.DestiniesTable,
			Columns: []string{destinypictures.DestiniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(destinies.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DestinyPictures{config: dpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{destinypictures.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	dpuo.mutation.done = true
	return _node, nil
}
