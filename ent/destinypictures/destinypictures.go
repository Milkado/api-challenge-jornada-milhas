// Code generated by ent, DO NOT EDIT.

package destinypictures

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the destinypictures type in the database.
	Label = "destiny_pictures"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPicture holds the string denoting the picture field in the database.
	FieldPicture = "picture"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// FieldDestinyID holds the string denoting the destiny_id field in the database.
	FieldDestinyID = "destiny_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeDestinies holds the string denoting the destinies edge name in mutations.
	EdgeDestinies = "destinies"
	// Table holds the table name of the destinypictures in the database.
	Table = "destiny_pictures"
	// DestiniesTable is the table that holds the destinies relation/edge.
	DestiniesTable = "destiny_pictures"
	// DestiniesInverseTable is the table name for the Destinies entity.
	// It exists in this package in order to avoid circular dependency with the "destinies" package.
	DestiniesInverseTable = "destinies"
	// DestiniesColumn is the table column denoting the destinies relation/edge.
	DestiniesColumn = "destiny_id"
)

// Columns holds all SQL columns for destinypictures fields.
var Columns = []string{
	FieldID,
	FieldPicture,
	FieldPath,
	FieldDestinyID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the DestinyPictures queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPicture orders the results by the picture field.
func ByPicture(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPicture, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByDestinyID orders the results by the destiny_id field.
func ByDestinyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDestinyID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDestiniesField orders the results by destinies field.
func ByDestiniesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDestiniesStep(), sql.OrderByField(field, opts...))
	}
}
func newDestiniesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DestiniesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DestiniesTable, DestiniesColumn),
	)
}
