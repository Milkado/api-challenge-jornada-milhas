// Code generated by ent, DO NOT EDIT.

package testimonies

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/Milkado/api-challenge-jornada-milhas/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldLTE(FieldID, id))
}

// Testimony applies equality check predicate on the "testimony" field. It's identical to TestimonyEQ.
func Testimony(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldEQ(FieldTestimony, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldEQ(FieldName, v))
}

// Picture applies equality check predicate on the "picture" field. It's identical to PictureEQ.
func Picture(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldEQ(FieldPicture, v))
}

// DestinyID applies equality check predicate on the "destiny_id" field. It's identical to DestinyIDEQ.
func DestinyID(v int) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldEQ(FieldDestinyID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldEQ(FieldUpdatedAt, v))
}

// TestimonyEQ applies the EQ predicate on the "testimony" field.
func TestimonyEQ(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldEQ(FieldTestimony, v))
}

// TestimonyNEQ applies the NEQ predicate on the "testimony" field.
func TestimonyNEQ(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldNEQ(FieldTestimony, v))
}

// TestimonyIn applies the In predicate on the "testimony" field.
func TestimonyIn(vs ...string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldIn(FieldTestimony, vs...))
}

// TestimonyNotIn applies the NotIn predicate on the "testimony" field.
func TestimonyNotIn(vs ...string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldNotIn(FieldTestimony, vs...))
}

// TestimonyGT applies the GT predicate on the "testimony" field.
func TestimonyGT(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldGT(FieldTestimony, v))
}

// TestimonyGTE applies the GTE predicate on the "testimony" field.
func TestimonyGTE(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldGTE(FieldTestimony, v))
}

// TestimonyLT applies the LT predicate on the "testimony" field.
func TestimonyLT(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldLT(FieldTestimony, v))
}

// TestimonyLTE applies the LTE predicate on the "testimony" field.
func TestimonyLTE(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldLTE(FieldTestimony, v))
}

// TestimonyContains applies the Contains predicate on the "testimony" field.
func TestimonyContains(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldContains(FieldTestimony, v))
}

// TestimonyHasPrefix applies the HasPrefix predicate on the "testimony" field.
func TestimonyHasPrefix(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldHasPrefix(FieldTestimony, v))
}

// TestimonyHasSuffix applies the HasSuffix predicate on the "testimony" field.
func TestimonyHasSuffix(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldHasSuffix(FieldTestimony, v))
}

// TestimonyEqualFold applies the EqualFold predicate on the "testimony" field.
func TestimonyEqualFold(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldEqualFold(FieldTestimony, v))
}

// TestimonyContainsFold applies the ContainsFold predicate on the "testimony" field.
func TestimonyContainsFold(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldContainsFold(FieldTestimony, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldContainsFold(FieldName, v))
}

// PictureEQ applies the EQ predicate on the "picture" field.
func PictureEQ(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldEQ(FieldPicture, v))
}

// PictureNEQ applies the NEQ predicate on the "picture" field.
func PictureNEQ(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldNEQ(FieldPicture, v))
}

// PictureIn applies the In predicate on the "picture" field.
func PictureIn(vs ...string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldIn(FieldPicture, vs...))
}

// PictureNotIn applies the NotIn predicate on the "picture" field.
func PictureNotIn(vs ...string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldNotIn(FieldPicture, vs...))
}

// PictureGT applies the GT predicate on the "picture" field.
func PictureGT(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldGT(FieldPicture, v))
}

// PictureGTE applies the GTE predicate on the "picture" field.
func PictureGTE(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldGTE(FieldPicture, v))
}

// PictureLT applies the LT predicate on the "picture" field.
func PictureLT(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldLT(FieldPicture, v))
}

// PictureLTE applies the LTE predicate on the "picture" field.
func PictureLTE(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldLTE(FieldPicture, v))
}

// PictureContains applies the Contains predicate on the "picture" field.
func PictureContains(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldContains(FieldPicture, v))
}

// PictureHasPrefix applies the HasPrefix predicate on the "picture" field.
func PictureHasPrefix(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldHasPrefix(FieldPicture, v))
}

// PictureHasSuffix applies the HasSuffix predicate on the "picture" field.
func PictureHasSuffix(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldHasSuffix(FieldPicture, v))
}

// PictureEqualFold applies the EqualFold predicate on the "picture" field.
func PictureEqualFold(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldEqualFold(FieldPicture, v))
}

// PictureContainsFold applies the ContainsFold predicate on the "picture" field.
func PictureContainsFold(v string) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldContainsFold(FieldPicture, v))
}

// DestinyIDEQ applies the EQ predicate on the "destiny_id" field.
func DestinyIDEQ(v int) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldEQ(FieldDestinyID, v))
}

// DestinyIDNEQ applies the NEQ predicate on the "destiny_id" field.
func DestinyIDNEQ(v int) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldNEQ(FieldDestinyID, v))
}

// DestinyIDIn applies the In predicate on the "destiny_id" field.
func DestinyIDIn(vs ...int) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldIn(FieldDestinyID, vs...))
}

// DestinyIDNotIn applies the NotIn predicate on the "destiny_id" field.
func DestinyIDNotIn(vs ...int) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldNotIn(FieldDestinyID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Testimonies {
	return predicate.Testimonies(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasDestinies applies the HasEdge predicate on the "destinies" edge.
func HasDestinies() predicate.Testimonies {
	return predicate.Testimonies(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DestiniesTable, DestiniesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDestiniesWith applies the HasEdge predicate on the "destinies" edge with a given conditions (other predicates).
func HasDestiniesWith(preds ...predicate.Destinies) predicate.Testimonies {
	return predicate.Testimonies(func(s *sql.Selector) {
		step := newDestiniesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Testimonies) predicate.Testimonies {
	return predicate.Testimonies(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Testimonies) predicate.Testimonies {
	return predicate.Testimonies(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Testimonies) predicate.Testimonies {
	return predicate.Testimonies(sql.NotPredicates(p))
}
