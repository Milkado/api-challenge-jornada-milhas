// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/Milkado/api-challenge-jornada-milhas/ent/destinies"
	"github.com/Milkado/api-challenge-jornada-milhas/ent/predicate"
	"github.com/Milkado/api-challenge-jornada-milhas/ent/testimonies"
)

// DestiniesUpdate is the builder for updating Destinies entities.
type DestiniesUpdate struct {
	config
	hooks    []Hook
	mutation *DestiniesMutation
}

// Where appends a list predicates to the DestiniesUpdate builder.
func (du *DestiniesUpdate) Where(ps ...predicate.Destinies) *DestiniesUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetName sets the "name" field.
func (du *DestiniesUpdate) SetName(s string) *DestiniesUpdate {
	du.mutation.SetName(s)
	return du
}

// SetNillableName sets the "name" field if the given value is not nil.
func (du *DestiniesUpdate) SetNillableName(s *string) *DestiniesUpdate {
	if s != nil {
		du.SetName(*s)
	}
	return du
}

// SetPrice sets the "price" field.
func (du *DestiniesUpdate) SetPrice(f float64) *DestiniesUpdate {
	du.mutation.ResetPrice()
	du.mutation.SetPrice(f)
	return du
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (du *DestiniesUpdate) SetNillablePrice(f *float64) *DestiniesUpdate {
	if f != nil {
		du.SetPrice(*f)
	}
	return du
}

// AddPrice adds f to the "price" field.
func (du *DestiniesUpdate) AddPrice(f float64) *DestiniesUpdate {
	du.mutation.AddPrice(f)
	return du
}

// SetMeta sets the "meta" field.
func (du *DestiniesUpdate) SetMeta(s string) *DestiniesUpdate {
	du.mutation.SetMeta(s)
	return du
}

// SetNillableMeta sets the "meta" field if the given value is not nil.
func (du *DestiniesUpdate) SetNillableMeta(s *string) *DestiniesUpdate {
	if s != nil {
		du.SetMeta(*s)
	}
	return du
}

// SetDescription sets the "description" field.
func (du *DestiniesUpdate) SetDescription(s string) *DestiniesUpdate {
	du.mutation.SetDescription(s)
	return du
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (du *DestiniesUpdate) SetNillableDescription(s *string) *DestiniesUpdate {
	if s != nil {
		du.SetDescription(*s)
	}
	return du
}

// ClearDescription clears the value of the "description" field.
func (du *DestiniesUpdate) ClearDescription() *DestiniesUpdate {
	du.mutation.ClearDescription()
	return du
}

// SetCreatedAt sets the "created_at" field.
func (du *DestiniesUpdate) SetCreatedAt(t time.Time) *DestiniesUpdate {
	du.mutation.SetCreatedAt(t)
	return du
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (du *DestiniesUpdate) SetNillableCreatedAt(t *time.Time) *DestiniesUpdate {
	if t != nil {
		du.SetCreatedAt(*t)
	}
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DestiniesUpdate) SetUpdatedAt(t time.Time) *DestiniesUpdate {
	du.mutation.SetUpdatedAt(t)
	return du
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (du *DestiniesUpdate) SetNillableUpdatedAt(t *time.Time) *DestiniesUpdate {
	if t != nil {
		du.SetUpdatedAt(*t)
	}
	return du
}

// AddTestimonyIDs adds the "testimonies" edge to the Testimonies entity by IDs.
func (du *DestiniesUpdate) AddTestimonyIDs(ids ...int) *DestiniesUpdate {
	du.mutation.AddTestimonyIDs(ids...)
	return du
}

// AddTestimonies adds the "testimonies" edges to the Testimonies entity.
func (du *DestiniesUpdate) AddTestimonies(t ...*Testimonies) *DestiniesUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return du.AddTestimonyIDs(ids...)
}

// Mutation returns the DestiniesMutation object of the builder.
func (du *DestiniesUpdate) Mutation() *DestiniesMutation {
	return du.mutation
}

// ClearTestimonies clears all "testimonies" edges to the Testimonies entity.
func (du *DestiniesUpdate) ClearTestimonies() *DestiniesUpdate {
	du.mutation.ClearTestimonies()
	return du
}

// RemoveTestimonyIDs removes the "testimonies" edge to Testimonies entities by IDs.
func (du *DestiniesUpdate) RemoveTestimonyIDs(ids ...int) *DestiniesUpdate {
	du.mutation.RemoveTestimonyIDs(ids...)
	return du
}

// RemoveTestimonies removes "testimonies" edges to Testimonies entities.
func (du *DestiniesUpdate) RemoveTestimonies(t ...*Testimonies) *DestiniesUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return du.RemoveTestimonyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DestiniesUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DestiniesUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DestiniesUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DestiniesUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DestiniesUpdate) check() error {
	if v, ok := du.mutation.Meta(); ok {
		if err := destinies.MetaValidator(v); err != nil {
			return &ValidationError{Name: "meta", err: fmt.Errorf(`ent: validator failed for field "Destinies.meta": %w`, err)}
		}
	}
	return nil
}

func (du *DestiniesUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(destinies.Table, destinies.Columns, sqlgraph.NewFieldSpec(destinies.FieldID, field.TypeInt))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.SetField(destinies.FieldName, field.TypeString, value)
	}
	if value, ok := du.mutation.Price(); ok {
		_spec.SetField(destinies.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.AddedPrice(); ok {
		_spec.AddField(destinies.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.Meta(); ok {
		_spec.SetField(destinies.FieldMeta, field.TypeString, value)
	}
	if value, ok := du.mutation.Description(); ok {
		_spec.SetField(destinies.FieldDescription, field.TypeString, value)
	}
	if du.mutation.DescriptionCleared() {
		_spec.ClearField(destinies.FieldDescription, field.TypeString)
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.SetField(destinies.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(destinies.FieldUpdatedAt, field.TypeTime, value)
	}
	if du.mutation.TestimoniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   destinies.TestimoniesTable,
			Columns: []string{destinies.TestimoniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testimonies.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedTestimoniesIDs(); len(nodes) > 0 && !du.mutation.TestimoniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   destinies.TestimoniesTable,
			Columns: []string{destinies.TestimoniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testimonies.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.TestimoniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   destinies.TestimoniesTable,
			Columns: []string{destinies.TestimoniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testimonies.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{destinies.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DestiniesUpdateOne is the builder for updating a single Destinies entity.
type DestiniesUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DestiniesMutation
}

// SetName sets the "name" field.
func (duo *DestiniesUpdateOne) SetName(s string) *DestiniesUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duo *DestiniesUpdateOne) SetNillableName(s *string) *DestiniesUpdateOne {
	if s != nil {
		duo.SetName(*s)
	}
	return duo
}

// SetPrice sets the "price" field.
func (duo *DestiniesUpdateOne) SetPrice(f float64) *DestiniesUpdateOne {
	duo.mutation.ResetPrice()
	duo.mutation.SetPrice(f)
	return duo
}

// SetNillablePrice sets the "price" field if the given value is not nil.
func (duo *DestiniesUpdateOne) SetNillablePrice(f *float64) *DestiniesUpdateOne {
	if f != nil {
		duo.SetPrice(*f)
	}
	return duo
}

// AddPrice adds f to the "price" field.
func (duo *DestiniesUpdateOne) AddPrice(f float64) *DestiniesUpdateOne {
	duo.mutation.AddPrice(f)
	return duo
}

// SetMeta sets the "meta" field.
func (duo *DestiniesUpdateOne) SetMeta(s string) *DestiniesUpdateOne {
	duo.mutation.SetMeta(s)
	return duo
}

// SetNillableMeta sets the "meta" field if the given value is not nil.
func (duo *DestiniesUpdateOne) SetNillableMeta(s *string) *DestiniesUpdateOne {
	if s != nil {
		duo.SetMeta(*s)
	}
	return duo
}

// SetDescription sets the "description" field.
func (duo *DestiniesUpdateOne) SetDescription(s string) *DestiniesUpdateOne {
	duo.mutation.SetDescription(s)
	return duo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (duo *DestiniesUpdateOne) SetNillableDescription(s *string) *DestiniesUpdateOne {
	if s != nil {
		duo.SetDescription(*s)
	}
	return duo
}

// ClearDescription clears the value of the "description" field.
func (duo *DestiniesUpdateOne) ClearDescription() *DestiniesUpdateOne {
	duo.mutation.ClearDescription()
	return duo
}

// SetCreatedAt sets the "created_at" field.
func (duo *DestiniesUpdateOne) SetCreatedAt(t time.Time) *DestiniesUpdateOne {
	duo.mutation.SetCreatedAt(t)
	return duo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (duo *DestiniesUpdateOne) SetNillableCreatedAt(t *time.Time) *DestiniesUpdateOne {
	if t != nil {
		duo.SetCreatedAt(*t)
	}
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DestiniesUpdateOne) SetUpdatedAt(t time.Time) *DestiniesUpdateOne {
	duo.mutation.SetUpdatedAt(t)
	return duo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (duo *DestiniesUpdateOne) SetNillableUpdatedAt(t *time.Time) *DestiniesUpdateOne {
	if t != nil {
		duo.SetUpdatedAt(*t)
	}
	return duo
}

// AddTestimonyIDs adds the "testimonies" edge to the Testimonies entity by IDs.
func (duo *DestiniesUpdateOne) AddTestimonyIDs(ids ...int) *DestiniesUpdateOne {
	duo.mutation.AddTestimonyIDs(ids...)
	return duo
}

// AddTestimonies adds the "testimonies" edges to the Testimonies entity.
func (duo *DestiniesUpdateOne) AddTestimonies(t ...*Testimonies) *DestiniesUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return duo.AddTestimonyIDs(ids...)
}

// Mutation returns the DestiniesMutation object of the builder.
func (duo *DestiniesUpdateOne) Mutation() *DestiniesMutation {
	return duo.mutation
}

// ClearTestimonies clears all "testimonies" edges to the Testimonies entity.
func (duo *DestiniesUpdateOne) ClearTestimonies() *DestiniesUpdateOne {
	duo.mutation.ClearTestimonies()
	return duo
}

// RemoveTestimonyIDs removes the "testimonies" edge to Testimonies entities by IDs.
func (duo *DestiniesUpdateOne) RemoveTestimonyIDs(ids ...int) *DestiniesUpdateOne {
	duo.mutation.RemoveTestimonyIDs(ids...)
	return duo
}

// RemoveTestimonies removes "testimonies" edges to Testimonies entities.
func (duo *DestiniesUpdateOne) RemoveTestimonies(t ...*Testimonies) *DestiniesUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return duo.RemoveTestimonyIDs(ids...)
}

// Where appends a list predicates to the DestiniesUpdate builder.
func (duo *DestiniesUpdateOne) Where(ps ...predicate.Destinies) *DestiniesUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DestiniesUpdateOne) Select(field string, fields ...string) *DestiniesUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Destinies entity.
func (duo *DestiniesUpdateOne) Save(ctx context.Context) (*Destinies, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DestiniesUpdateOne) SaveX(ctx context.Context) *Destinies {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DestiniesUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DestiniesUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DestiniesUpdateOne) check() error {
	if v, ok := duo.mutation.Meta(); ok {
		if err := destinies.MetaValidator(v); err != nil {
			return &ValidationError{Name: "meta", err: fmt.Errorf(`ent: validator failed for field "Destinies.meta": %w`, err)}
		}
	}
	return nil
}

func (duo *DestiniesUpdateOne) sqlSave(ctx context.Context) (_node *Destinies, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(destinies.Table, destinies.Columns, sqlgraph.NewFieldSpec(destinies.FieldID, field.TypeInt))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Destinies.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, destinies.FieldID)
		for _, f := range fields {
			if !destinies.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != destinies.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Name(); ok {
		_spec.SetField(destinies.FieldName, field.TypeString, value)
	}
	if value, ok := duo.mutation.Price(); ok {
		_spec.SetField(destinies.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.AddedPrice(); ok {
		_spec.AddField(destinies.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.Meta(); ok {
		_spec.SetField(destinies.FieldMeta, field.TypeString, value)
	}
	if value, ok := duo.mutation.Description(); ok {
		_spec.SetField(destinies.FieldDescription, field.TypeString, value)
	}
	if duo.mutation.DescriptionCleared() {
		_spec.ClearField(destinies.FieldDescription, field.TypeString)
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.SetField(destinies.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(destinies.FieldUpdatedAt, field.TypeTime, value)
	}
	if duo.mutation.TestimoniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   destinies.TestimoniesTable,
			Columns: []string{destinies.TestimoniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testimonies.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedTestimoniesIDs(); len(nodes) > 0 && !duo.mutation.TestimoniesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   destinies.TestimoniesTable,
			Columns: []string{destinies.TestimoniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testimonies.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.TestimoniesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   destinies.TestimoniesTable,
			Columns: []string{destinies.TestimoniesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(testimonies.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Destinies{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{destinies.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
