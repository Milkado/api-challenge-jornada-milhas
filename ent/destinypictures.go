// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/Milkado/api-challenge-jornada-milhas/ent/destinies"
	"github.com/Milkado/api-challenge-jornada-milhas/ent/destinypictures"
)

// DestinyPictures is the model entity for the DestinyPictures schema.
type DestinyPictures struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Picture holds the value of the "picture" field.
	Picture string `json:"picture,omitempty"`
	// Path holds the value of the "path" field.
	Path string `json:"path,omitempty"`
	// DestinyID holds the value of the "destiny_id" field.
	DestinyID int `json:"destiny_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DestinyPicturesQuery when eager-loading is set.
	Edges        DestinyPicturesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DestinyPicturesEdges holds the relations/edges for other nodes in the graph.
type DestinyPicturesEdges struct {
	// Destinies holds the value of the destinies edge.
	Destinies *Destinies `json:"destinies,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DestiniesOrErr returns the Destinies value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DestinyPicturesEdges) DestiniesOrErr() (*Destinies, error) {
	if e.Destinies != nil {
		return e.Destinies, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: destinies.Label}
	}
	return nil, &NotLoadedError{edge: "destinies"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DestinyPictures) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case destinypictures.FieldID, destinypictures.FieldDestinyID:
			values[i] = new(sql.NullInt64)
		case destinypictures.FieldPicture, destinypictures.FieldPath:
			values[i] = new(sql.NullString)
		case destinypictures.FieldCreatedAt, destinypictures.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DestinyPictures fields.
func (dp *DestinyPictures) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case destinypictures.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dp.ID = int(value.Int64)
		case destinypictures.FieldPicture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field picture", values[i])
			} else if value.Valid {
				dp.Picture = value.String
			}
		case destinypictures.FieldPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field path", values[i])
			} else if value.Valid {
				dp.Path = value.String
			}
		case destinypictures.FieldDestinyID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field destiny_id", values[i])
			} else if value.Valid {
				dp.DestinyID = int(value.Int64)
			}
		case destinypictures.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dp.CreatedAt = value.Time
			}
		case destinypictures.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dp.UpdatedAt = value.Time
			}
		default:
			dp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DestinyPictures.
// This includes values selected through modifiers, order, etc.
func (dp *DestinyPictures) Value(name string) (ent.Value, error) {
	return dp.selectValues.Get(name)
}

// QueryDestinies queries the "destinies" edge of the DestinyPictures entity.
func (dp *DestinyPictures) QueryDestinies() *DestiniesQuery {
	return NewDestinyPicturesClient(dp.config).QueryDestinies(dp)
}

// Update returns a builder for updating this DestinyPictures.
// Note that you need to call DestinyPictures.Unwrap() before calling this method if this DestinyPictures
// was returned from a transaction, and the transaction was committed or rolled back.
func (dp *DestinyPictures) Update() *DestinyPicturesUpdateOne {
	return NewDestinyPicturesClient(dp.config).UpdateOne(dp)
}

// Unwrap unwraps the DestinyPictures entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dp *DestinyPictures) Unwrap() *DestinyPictures {
	_tx, ok := dp.config.driver.(*txDriver)
	if !ok {
		panic("ent: DestinyPictures is not a transactional entity")
	}
	dp.config.driver = _tx.drv
	return dp
}

// String implements the fmt.Stringer.
func (dp *DestinyPictures) String() string {
	var builder strings.Builder
	builder.WriteString("DestinyPictures(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dp.ID))
	builder.WriteString("picture=")
	builder.WriteString(dp.Picture)
	builder.WriteString(", ")
	builder.WriteString("path=")
	builder.WriteString(dp.Path)
	builder.WriteString(", ")
	builder.WriteString("destiny_id=")
	builder.WriteString(fmt.Sprintf("%v", dp.DestinyID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(dp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(dp.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DestinyPicturesSlice is a parsable slice of DestinyPictures.
type DestinyPicturesSlice []*DestinyPictures
